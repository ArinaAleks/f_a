#include <stdio.h>
#include <math.h>
#include <string.h>


double MyAtof(const char* str) {
    double result = 0.0;
    double fraction = 0.0;
    int sign = 1;
    int exponent = 0;
    int exponent_sign = 1;
    int i = 0;

    // Пропускаем начальные пробелы
    while (str[i] == ' ' || str[i] == '\t' || str[i] == '\n' || str[i] == '\v' || str[i] == '\f' || str[i] == '\r') {
        i++;
    }

    // Определяем знак числа
    if (str[i] == '-' || str[i] == '+') {
        sign = (str[i] == '-') ? -1 : 1;
        i++;
    }

    // Обрабатываем целую часть числа
    while (str[i] >= '0' && str[i] <= '9') {
        result = result * 10 + (str[i] - '0');
        i++;
    }

    // Обрабатываем дробную часть числа
    if (str[i] == '.') {
        i++;
        double fraction_factor = 0.1;
        while (str[i] >= '0' && str[i] <= '9') {
            fraction += (str[i] - '0') * fraction_factor;
            fraction_factor *= 0.1;
            i++;
        }
    }

    // Объединяем целую и дробную части
    result += fraction;

    // Обрабатываем экспоненциальную часть числа
    if (str[i] == 'e' || str[i] == 'E') {
        i++;

        // Определяем знак экспоненты
        if (str[i] == '-' || str[i] == '+') {
            exponent_sign = (str[i] == '-') ? -1 : 1;
            i++;
        }

        // Обрабатываем значение экспоненты
        while (str[i] >= '0' && str[i] <= '9') {
            exponent = exponent * 10 + (str[i] - '0');
            i++;
        }
    }

    // Применяем экспоненту
    if (exponent_sign == -1) {
        for (int j = 0; j < exponent; j++) {
            result *= 0.1;
        }
    }
    else {
        for (int j = 0; j < exponent; j++) {
            result *= 10;
        }
    }

    // Применяем знак числа
    return sign * result;
}


int MyAtoi(char* str) {
    int res = 0;
    for (int i = 0; str[i] != '\0'; ++i) {
        res = 10 * res + str[i] - '0';
    }
    return res;
}



// Функция для сравнения вещественных чисел с заданной точностью
int accuracy(double a, double b, double epsilon) {
    return fabs(a - b) < epsilon;
}

// Функция для решения квадратного уравнения и вывода всех уникальных перестановок
void quadraticEquation(double a, double b, double c, double epsilon) {
    double discriminant = b * b - 4 * a * c;

    if (accuracy(discriminant, 0.0, epsilon)) {
        double x = -b / (2 * a);
        printf("x = %.6f\n", x);
    }
    else if (discriminant > 0.0) {
        double x1 = (-b + sqrt(discriminant)) / (2 * a);
        double x2 = (-b - sqrt(discriminant)) / (2 * a);
        printf("x1 = %.6f, x2 = %.6f\n", x1, x2);
    }
    else {
        printf("Нет действительных корней.\n");
    }
}

// Функция для проверки, являются ли три числа сторонами прямоугольного треугольника
int rightTriangle(double a, double b, double c, double epsilon) {
    double sides[3] = {a, b, c};
    for (int i = 0; i < 3; i++) {
        for (int j = i + 1; j < 3; j++) {
            if (sides[i] > sides[j]) {
                double temp = sides[i];
                sides[i] = sides[j];
                sides[j] = temp;
            }
        }
    }
    return accuracy(sides[0] * sides[0] + sides[1] * sides[1], sides[2] * sides[2], epsilon);
}

int main(int argc, char* argv[]) {
    if (argc < 2) {
        printf("Неверный ввод.\n");
        return 1;
    }

    char* flag = argv[1];

    if ((strcmp(flag, "-q") == 0) || (strcmp(flag, "/q") == 0)) {
        if (argc != 6) {
            printf("Неверный ввод. Необходимо 6 аргументов.\n");
            return 1;
        }

        double epsilon = MyAtof(argv[2]);
        double a = MyAtof(argv[3]);
        double b = MyAtof(argv[4]);
        double c = MyAtof(argv[5]);

        quadraticEquation(a, b, c, epsilon);
        quadraticEquation(a, c, b, epsilon);
        quadraticEquation(b, a, c, epsilon);
        quadraticEquation(b, c, a, epsilon);
        quadraticEquation(c, a, b, epsilon);
        quadraticEquation(c, b, a, epsilon);

    }
    else if ((strcmp(flag, "-m") == 0) || (strcmp(flag, "/m") == 0)) {
        if (argc != 4) {
            printf("Неверный ввод. Необходимо 4 аргумента.\n");
            return 1;
        }

        int a = MyAtoi(argv[2]);
        int b = MyAtoi(argv[3]);

        if (a == 0 || b == 0) {
            printf("Необходимо задать два ненулевых числа.\n");
            return 1;
        }

        if (a % b == 0) {
            printf("%d делится на %d\n", a, b);
        }
        else {
            printf("%d не делится на %d\n", a, b);
        }

    }
    else if ((strcmp(flag, "-t") == 0) || (strcmp(flag, "/t") == 0)) {
        if (argc != 6) {
            printf("Неверный ввод. Необходимо 6 аргументов.\n");
            return 1;
        }

        double epsilon = MyAtof(argv[2]);
        double a = MyAtof(argv[3]);
        double b = MyAtof(argv[4]);
        double c = MyAtof(argv[5]);

        if (rightTriangle(a, b, c, epsilon)) {
            printf("Параметры могут являться длинами сторон прямоугольного треугольника.\n");
        }
        else {
            printf("Параметры не могут являться длинами сторон прямоугольного треугольника.\n");
        }

    }
    else {
        printf("Неизвестный флаг: %s\n", flag);
        return 1;
    }

    return 0;
}

