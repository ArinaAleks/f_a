#include <stdio.h>
#include <math.h>


double MyAtof(const char* str) {
    double result = 0.0;
    double fraction = 0.0;
    int sign = 1;
    int exponent = 0;
    int exponent_sign = 1;
    int i = 0;

    // Пропускаем начальные пробелы
    while (str[i] == ' ' || str[i] == '\t' || str[i] == '\n' || str[i] == '\v' || str[i] == '\f' || str[i] == '\r') {
        i++;
    }

    // Определяем знак числа
    if (str[i] == '-' || str[i] == '+') {
        sign = (str[i] == '-') ? -1 : 1;
        i++;
    }

    // Обрабатываем целую часть числа
    while (str[i] >= '0' && str[i] <= '9') {
        result = result * 10 + (str[i] - '0');
        i++;
    }

    // Обрабатываем дробную часть числа
    if (str[i] == '.') {
        i++;
        double fraction_factor = 0.1;
        while (str[i] >= '0' && str[i] <= '9') {
            fraction += (str[i] - '0') * fraction_factor;
            fraction_factor *= 0.1;
            i++;
        }
    }

    // Объединяем целую и дробную части
    result += fraction;

    // Обрабатываем экспоненциальную часть числа
    if (str[i] == 'e' || str[i] == 'E') {
        i++;

        // Определяем знак экспоненты
        if (str[i] == '-' || str[i] == '+') {
            exponent_sign = (str[i] == '-') ? -1 : 1;
            i++;
        }

        // Обрабатываем значение экспоненты
        while (str[i] >= '0' && str[i] <= '9') {
            exponent = exponent * 10 + (str[i] - '0');
            i++;
        }
    }

    // Применяем экспоненту
    if (exponent_sign == -1) {
        for (int j = 0; j < exponent; j++) {
            result *= 0.1;
        }
    }
    else {
        for (int j = 0; j < exponent; j++) {
            result *= 10;
        }
    }

    // Применяем знак числа
    return sign * result;
}




// Функция для вычисления интеграла методом прямоугольников
double integrate(double (*f)(double), double a, double b, double epsilon) {
    int n = 1;  // Начальное количество разбиений (отрезков)
    double h = (b - a) / n;
    double sum1 = 0.0, sum2 = 0.0;

    do {
        sum1 = sum2;
        sum2 = 0.0;
        h = (b - a) / n;

        for (int i = 0; i < n; i++) {
            double x = a + (i + 0.5) * h;
            sum2 += f(x);
        }

        sum2 *= h;
        n *= 2;
    } while (fabs(sum2 - sum1) > epsilon);

    return sum2;
}

// Функции для интегралов
double f1(double x) {
    return log(1 + x) / x;
}

double f2(double x) {
    return exp(-x * x / 2);
}

double f3(double x) {
    return log(1 / (1 - x));
}

double f4(double x) {
    return pow(x, x);
}

int main(int argc, char* argv[]) {
    if (argc != 2) {
        printf("Необходимо ввести значение эпсилон.\n");
        return 1;
    }

    double epsilon = MyAtof(argv[1]);

    // Вычисление интегралов
    double result1 = integrate(f1, 0.0001, 1, epsilon);  // Избегаем деления на ноль в f1(0)
    double result2 = integrate(f2, 0, 1, epsilon);
    double result3 = integrate(f3, 0, 0.9999, epsilon);  // Избегаем деления на ноль в f3(1)
    double result4 = integrate(f4, 0, 1, epsilon);

    // Вывод результатов
    printf("a) Интеграл от 0 до 1 (ln(1+x)/x)dx = %lf\n", result1);
    printf("b) Интеграл от 0 до 1 (e^(-x^2/2))dx = %lf\n", result2);
    printf("c) Интеграл от 0 до 1 (ln(1/(1-x)))dx = %lf\n", result3);
    printf("d) Интеграл от 0 до 1 (x^x)dx = %lf\n", result4);

    return 0;
}
